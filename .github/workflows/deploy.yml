name: Manual EKS Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GOGC: 200  # Increased from 50 to reduce GC frequency
      GOMAXPROCS: 4  # Increased from 2 to allow more parallel processing
      GOTOOLCHAIN: local
      GOFLAGS: "-buildvcs=false"
      GO111MODULE: on
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      
      - name: Cache golangci-lint workspace
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.cache/golangci-lint
            /home/runner/.cache/go-build
          key: ${{ runner.os }}-golangci-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-golangci-
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.57.2
          args: --timeout=5m --max-issues-per-linter=0 --max-same-issues=0  # Removed limitation on issues
          skip-cache: false
          install-mode: binary
          # Removed only-new-issues to prevent potential resource constraints

  proto-gen:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GOTOOLCHAIN: local
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      
      - name: Install Protobuf Tools
        run: |
          # Install protoc
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

          # Install Go protobuf generators
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          
          # Install additional protobuf generators
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          
          # Install mockgen for mock generation
          go install go.uber.org/mock/mockgen@latest

          # Install Buf for proto generation
          curl -sSL https://github.com/bufbuild/buf/releases/download/v1.30.0/buf-Linux-x86_64 -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf

      - name: Generate Proto Files and Mocks
        run: |
          # Generate proto files
          cd proto
          buf generate
          cd ..
          
          # Generate mocks
          cd api/types
          mockgen -source=api_grpc.pb.go -destination=api_mock.pb.go -package=types

      - name: Upload Generated Files
        uses: actions/upload-artifact@v4
        with:
          name: generated-proto
          path: api/types/
          retention-days: 1

  build-and-cache:
    needs: [lint, proto-gen]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      GOTOOLCHAIN: local
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4

      - name: Download Generated Proto Files
        uses: actions/download-artifact@v4
        with:
          name: generated-proto
          path: api/types/
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build
        run: go build -v ./...

  deploy-blue-green:
    needs: [build-and-cache]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    env:
      CLUSTER_NAME: skip-platform-${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Generated Proto Files
        uses: actions/download-artifact@v4
        with:
          name: generated-proto
          path: api/types/
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -f docker/Dockerfile.app .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      
      - name: Install eksctl and kubectl and aws cli
        run: |
          # Install eksctl
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Blue-Green Deployment
        env:
          NAMESPACE: default
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Configure kubectl
          aws eks update-kubeconfig --name $CLUSTER_NAME --region us-west-2
          
          # Determine current active version (blue or green)
          CURRENT_VERSION=$(kubectl get service skip-platform-service -n $NAMESPACE -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "blue")
          echo "Current version: $CURRENT_VERSION"
          
          # Set new version to be the opposite
          if [ "$CURRENT_VERSION" = "blue" ]; then
            NEW_VERSION="green"
            OLD_VERSION="blue"
          else
            NEW_VERSION="blue"
            OLD_VERSION="green"
          fi
          echo "Deploying new version: $NEW_VERSION"
          
          # Create new deployment
          cat << EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: skip-platform-$NEW_VERSION
            namespace: $NAMESPACE
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: skip-platform
                version: $NEW_VERSION
            template:
              metadata:
                labels:
                  app: skip-platform
                  version: $NEW_VERSION
              spec:
                containers:
                - name: skip-platform
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
                  ports:
                  - containerPort: 8080
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 5
                    periodSeconds: 10
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8080
                    initialDelaySeconds: 15
                    periodSeconds: 20
          EOF
          
          # Apply new deployment
          kubectl apply -f deployment.yaml
          
          # Wait for new deployment to be ready
          kubectl rollout status deployment/skip-platform-$NEW_VERSION -n $NAMESPACE
          
          # Create rollback service config pointing to old version
          cat << EOF > service-rollback.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: skip-platform-service
            namespace: $NAMESPACE
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: external
              service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
          spec:
            type: LoadBalancer
            selector:
              app: skip-platform
              version: $OLD_VERSION
            ports:
            - port: 80
              targetPort: 8080
          EOF

          # Create or update service to point to new version
          cat << EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: skip-platform-service
            namespace: $NAMESPACE
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: external
              service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
          spec:
            type: LoadBalancer
            selector:
              app: skip-platform
              version: $NEW_VERSION
            ports:
            - port: 80
              targetPort: 8080
          EOF
          
          # Apply service to switch traffic
          kubectl apply -f service.yaml
          
          # Wait for LoadBalancer to get external hostname and print it
          echo "Waiting for LoadBalancer endpoint..."
          while true; do
            SERVICE_IP=$(kubectl get service skip-platform-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ ! -z "$SERVICE_IP" ]; then
              echo "Service is available at: http://$SERVICE_IP"
              break
            fi
            echo "Waiting for LoadBalancer to be ready..."
            sleep 10
          done

          # Display pod status
          echo "New version pods:"
          kubectl get pods -n $NAMESPACE -l "version=$NEW_VERSION" -o wide
          
          # If everything is successful, delete old deployment after a grace period
          if [ -n "$(kubectl get deployment skip-platform-$OLD_VERSION -n $NAMESPACE 2>/dev/null)" ]; then
            echo "Waiting grace period before removing old deployment..."
            sleep 60
            echo "Removing old deployment: $OLD_VERSION"
            kubectl delete deployment skip-platform-$OLD_VERSION -n $NAMESPACE
          fi


  notify:
    needs: [deploy-blue-green]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()
