name: Manual EKS Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: false
      
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.57.2
        shell: bash
      
      - name: Run golangci-lint
        run: |
          echo "Running golangci-lint..."
          $(go env GOPATH)/bin/golangci-lint run ./...
        shell: bash
        continue-on-error: false

  proto-gen:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Install Protobuf Tools
        run: |
          # Install protoc
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

          # Install Go protobuf generators
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          
          # Install additional protobuf generators
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

          # Install Buf for proto generation
          curl -sSL https://github.com/bufbuild/buf/releases/download/v1.30.0/buf-Linux-x86_64 -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf

      - name: Generate Proto Files
        run: |
          cd proto
          buf generate

  build-and-cache:
    needs: [lint, proto-gen]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build
        run: go build -v ./...

  deploy-blue-green:
    needs: [build-and-cache]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -f docker/Dockerfile.app .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      
      - name: Install eksctl and kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      
      - name: Blue-Green Deployment
        env:
          CLUSTER_NAME: skip-platform-production
          NAMESPACE: default
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Configure kubectl
          aws eks update-kubeconfig --name $CLUSTER_NAME --region us-west-2
          
          # Create blue deployment
          cat << EOF > blue-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: skip-platform-blue
            namespace: $NAMESPACE
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: skip-platform
                version: blue
            template:
              metadata:
                labels:
                  app: skip-platform
                  version: blue
              spec:
                containers:
                - name: skip-platform
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
                  ports:
                  - containerPort: 8080
          EOF
          
          # Create green deployment
          cat << EOF > green-deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: skip-platform-green
            namespace: $NAMESPACE
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: skip-platform
                version: green
            template:
              metadata:
                labels:
                  app: skip-platform
                  version: green
              spec:
                containers:
                - name: skip-platform
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG
                  ports:
                  - containerPort: 8080
          EOF
          
          # Create service
          cat << EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: skip-platform-service
            namespace: $NAMESPACE
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: external
              service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
          spec:
            type: LoadBalancer
            selector:
              app: skip-platform
              version: blue
            ports:
            - port: 80
              targetPort: 8080
          EOF
          
          # Apply deployments and service
          kubectl apply -f blue-deployment.yaml
          kubectl apply -f green-deployment.yaml
          kubectl apply -f service.yaml
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/skip-platform-blue
          kubectl rollout status deployment/skip-platform-green

  notify:
    needs: [deploy-blue-green]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()
